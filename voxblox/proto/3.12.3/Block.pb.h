// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Block_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Block_2eproto;
namespace voxblox {
class BlockProto;
class BlockProtoDefaultTypeInternal;
extern BlockProtoDefaultTypeInternal _BlockProto_default_instance_;
}  // namespace voxblox
PROTOBUF_NAMESPACE_OPEN
template<> ::voxblox::BlockProto* Arena::CreateMaybeMessage<::voxblox::BlockProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace voxblox {

// ===================================================================

class BlockProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:voxblox.BlockProto) */ {
 public:
  inline BlockProto() : BlockProto(nullptr) {};
  virtual ~BlockProto();

  BlockProto(const BlockProto& from);
  BlockProto(BlockProto&& from) noexcept
    : BlockProto() {
    *this = ::std::move(from);
  }

  inline BlockProto& operator=(const BlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockProto& operator=(BlockProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockProto* internal_default_instance() {
    return reinterpret_cast<const BlockProto*>(
               &_BlockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockProto& a, BlockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockProto* New() const final {
    return CreateMaybeMessage<BlockProto>(nullptr);
  }

  BlockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockProto& from);
  void MergeFrom(const BlockProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "voxblox.BlockProto";
  }
  protected:
  explicit BlockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Block_2eproto);
    return ::descriptor_table_Block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoxelDataFieldNumber = 7,
    kVoxelSizeFieldNumber = 2,
    kOriginXFieldNumber = 3,
    kVoxelsPerSideFieldNumber = 1,
    kHasDataFieldNumber = 6,
    kOriginYFieldNumber = 4,
    kOriginZFieldNumber = 5,
  };
  // repeated uint32 voxel_data = 7;
  int voxel_data_size() const;
  private:
  int _internal_voxel_data_size() const;
  public:
  void clear_voxel_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voxel_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_voxel_data() const;
  void _internal_add_voxel_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_voxel_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 voxel_data(int index) const;
  void set_voxel_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_voxel_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      voxel_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_voxel_data();

  // optional double voxel_size = 2;
  bool has_voxel_size() const;
  private:
  bool _internal_has_voxel_size() const;
  public:
  void clear_voxel_size();
  double voxel_size() const;
  void set_voxel_size(double value);
  private:
  double _internal_voxel_size() const;
  void _internal_set_voxel_size(double value);
  public:

  // optional double origin_x = 3;
  bool has_origin_x() const;
  private:
  bool _internal_has_origin_x() const;
  public:
  void clear_origin_x();
  double origin_x() const;
  void set_origin_x(double value);
  private:
  double _internal_origin_x() const;
  void _internal_set_origin_x(double value);
  public:

  // optional int32 voxels_per_side = 1;
  bool has_voxels_per_side() const;
  private:
  bool _internal_has_voxels_per_side() const;
  public:
  void clear_voxels_per_side();
  ::PROTOBUF_NAMESPACE_ID::int32 voxels_per_side() const;
  void set_voxels_per_side(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voxels_per_side() const;
  void _internal_set_voxels_per_side(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool has_data = 6;
  bool has_has_data() const;
  private:
  bool _internal_has_has_data() const;
  public:
  void clear_has_data();
  bool has_data() const;
  void set_has_data(bool value);
  private:
  bool _internal_has_data() const;
  void _internal_set_has_data(bool value);
  public:

  // optional double origin_y = 4;
  bool has_origin_y() const;
  private:
  bool _internal_has_origin_y() const;
  public:
  void clear_origin_y();
  double origin_y() const;
  void set_origin_y(double value);
  private:
  double _internal_origin_y() const;
  void _internal_set_origin_y(double value);
  public:

  // optional double origin_z = 5;
  bool has_origin_z() const;
  private:
  bool _internal_has_origin_z() const;
  public:
  void clear_origin_z();
  double origin_z() const;
  void set_origin_z(double value);
  private:
  double _internal_origin_z() const;
  void _internal_set_origin_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:voxblox.BlockProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > voxel_data_;
  double voxel_size_;
  double origin_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 voxels_per_side_;
  bool has_data_;
  double origin_y_;
  double origin_z_;
  friend struct ::TableStruct_Block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockProto

// optional int32 voxels_per_side = 1;
inline bool BlockProto::_internal_has_voxels_per_side() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlockProto::has_voxels_per_side() const {
  return _internal_has_voxels_per_side();
}
inline void BlockProto::clear_voxels_per_side() {
  voxels_per_side_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockProto::_internal_voxels_per_side() const {
  return voxels_per_side_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockProto::voxels_per_side() const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.voxels_per_side)
  return _internal_voxels_per_side();
}
inline void BlockProto::_internal_set_voxels_per_side(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  voxels_per_side_ = value;
}
inline void BlockProto::set_voxels_per_side(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voxels_per_side(value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.voxels_per_side)
}

// optional double voxel_size = 2;
inline bool BlockProto::_internal_has_voxel_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlockProto::has_voxel_size() const {
  return _internal_has_voxel_size();
}
inline void BlockProto::clear_voxel_size() {
  voxel_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BlockProto::_internal_voxel_size() const {
  return voxel_size_;
}
inline double BlockProto::voxel_size() const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.voxel_size)
  return _internal_voxel_size();
}
inline void BlockProto::_internal_set_voxel_size(double value) {
  _has_bits_[0] |= 0x00000001u;
  voxel_size_ = value;
}
inline void BlockProto::set_voxel_size(double value) {
  _internal_set_voxel_size(value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.voxel_size)
}

// optional double origin_x = 3;
inline bool BlockProto::_internal_has_origin_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlockProto::has_origin_x() const {
  return _internal_has_origin_x();
}
inline void BlockProto::clear_origin_x() {
  origin_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double BlockProto::_internal_origin_x() const {
  return origin_x_;
}
inline double BlockProto::origin_x() const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.origin_x)
  return _internal_origin_x();
}
inline void BlockProto::_internal_set_origin_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  origin_x_ = value;
}
inline void BlockProto::set_origin_x(double value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.origin_x)
}

// optional double origin_y = 4;
inline bool BlockProto::_internal_has_origin_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlockProto::has_origin_y() const {
  return _internal_has_origin_y();
}
inline void BlockProto::clear_origin_y() {
  origin_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double BlockProto::_internal_origin_y() const {
  return origin_y_;
}
inline double BlockProto::origin_y() const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.origin_y)
  return _internal_origin_y();
}
inline void BlockProto::_internal_set_origin_y(double value) {
  _has_bits_[0] |= 0x00000010u;
  origin_y_ = value;
}
inline void BlockProto::set_origin_y(double value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.origin_y)
}

// optional double origin_z = 5;
inline bool BlockProto::_internal_has_origin_z() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlockProto::has_origin_z() const {
  return _internal_has_origin_z();
}
inline void BlockProto::clear_origin_z() {
  origin_z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double BlockProto::_internal_origin_z() const {
  return origin_z_;
}
inline double BlockProto::origin_z() const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.origin_z)
  return _internal_origin_z();
}
inline void BlockProto::_internal_set_origin_z(double value) {
  _has_bits_[0] |= 0x00000020u;
  origin_z_ = value;
}
inline void BlockProto::set_origin_z(double value) {
  _internal_set_origin_z(value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.origin_z)
}

// optional bool has_data = 6;
inline bool BlockProto::_internal_has_has_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlockProto::has_has_data() const {
  return _internal_has_has_data();
}
inline void BlockProto::clear_has_data() {
  has_data_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BlockProto::_internal_has_data() const {
  return has_data_;
}
inline bool BlockProto::has_data() const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.has_data)
  return _internal_has_data();
}
inline void BlockProto::_internal_set_has_data(bool value) {
  _has_bits_[0] |= 0x00000008u;
  has_data_ = value;
}
inline void BlockProto::set_has_data(bool value) {
  _internal_set_has_data(value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.has_data)
}

// repeated uint32 voxel_data = 7;
inline int BlockProto::_internal_voxel_data_size() const {
  return voxel_data_.size();
}
inline int BlockProto::voxel_data_size() const {
  return _internal_voxel_data_size();
}
inline void BlockProto::clear_voxel_data() {
  voxel_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockProto::_internal_voxel_data(int index) const {
  return voxel_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockProto::voxel_data(int index) const {
  // @@protoc_insertion_point(field_get:voxblox.BlockProto.voxel_data)
  return _internal_voxel_data(index);
}
inline void BlockProto::set_voxel_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  voxel_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:voxblox.BlockProto.voxel_data)
}
inline void BlockProto::_internal_add_voxel_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  voxel_data_.Add(value);
}
inline void BlockProto::add_voxel_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_voxel_data(value);
  // @@protoc_insertion_point(field_add:voxblox.BlockProto.voxel_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BlockProto::_internal_voxel_data() const {
  return voxel_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BlockProto::voxel_data() const {
  // @@protoc_insertion_point(field_list:voxblox.BlockProto.voxel_data)
  return _internal_voxel_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BlockProto::_internal_mutable_voxel_data() {
  return &voxel_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BlockProto::mutable_voxel_data() {
  // @@protoc_insertion_point(field_mutable_list:voxblox.BlockProto.voxel_data)
  return _internal_mutable_voxel_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace voxblox

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Block_2eproto
